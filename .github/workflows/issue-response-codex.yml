name: Issue Response Bot (Codex with gh)

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  respond-to-issue:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install OpenAI Codex
        run: npm install -g @openai/codex
        
      - name: GitHub CLIをインストール
        run: |
          type -p curl >/dev/null || apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          
      - name: Post Initial Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 処理開始メッセージと折りたたみセクションでコード表示
          gh issue comment ${{ github.event.issue.number }} --body '🚀 処理を開始します...

          <details>
          <summary>Codexへの指示内容</summary>

          ```
          以下のissueに対する対応計画を立て、ghコマンドでコメントしてください：
          
          Issue番号: #${{ github.event.issue.number }}
          タイトル: ${{ github.event.issue.title }}
          内容: ${{ github.event.issue.body }}
          
          実行してください：
          1. issueを分析して対応方針を決定
          2. ghコマンドで計画をissueにコメント (例: gh issue comment #番号 --body '"'"'内容'"'"')
          3. 必要なコード修正やドキュメント更新を実施
          ```
          </details>'
        
      - name: Analyze and Plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Codexに計画を立てさせ、issueにコメントさせる
          codex --full-auto  --quiet  "以下のissueに対する対応計画を立て、ghコマンドでコメントしてください：
          
          Issue番号: #${{ github.event.issue.number }}
          タイトル: ${{ github.event.issue.title }}
          内容: ${{ github.event.issue.body }}
          ＊.github フォルダ内には手を加えないで
          
          実行してください：
          1. issueを分析して対応方針を決定
          2. ghコマンドで計画をissueにコメント (例: gh issue comment #番号 --body '内容')
          3. 必要なコード修正やドキュメント更新を実施"
      
      - name: Create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # タイムスタンプを生成 (YYYYMMDDHHmmss形式)
          TIMESTAMP=$(date '+%Y%m%d%H%M%S')
          BRANCH_NAME="fix-issue-${{ github.event.issue.number }}-$TIMESTAMP"
          
          # 現在の状態を確認
          git status
          
          # 新しいブランチを作成
          git checkout -b $BRANCH_NAME
          
          # ブランチ切り替え後の状態を確認
          git status
          
          # ファイル変更やコミットを行う（Codexが対応する）
          
          # 変更後の状態を確認
          git status
          
          # Codexにプルリクエストを作成させる
          codex --full-auto --quiet "以下のghコマンドを使ってプルリクエストを作成してください：
          
          1. 変更状態を確認: git status
          2. 修正内容を確認して、以下のようなコミットメッセージを作成してください:
             '🔧 fix(${修正したコンポーネント名}): #${{ github.event.issue.number }} ${問題の簡潔な説明} を修正
             
             🔍 問題: ${Issueから分析した問題の詳細}
             ✅ 対応: ${実装した解決策の詳細}
             🧪 テスト: ${テスト方法または検証方法}
             
             Issue: #${{ github.event.issue.number }}'
             
             例:
             '🔧 fix(auth): #123 ログイン時のセッション切れエラーを修正
             
             🔍 問題: 長時間操作がないとセッションが切れるがユーザーに通知されず操作できない状態になっていた
             ✅ 対応: セッション有効期限切れを検知し、再ログイン画面に自動遷移する処理を追加
             🧪 テスト: 手動でセッションCookieを削除し、適切に再ログイン画面に遷移することを確認
             
             Issue: #123'
          3. コミット後の状態確認: git status
          4. 新しいブランチにpush: git push origin HEAD:$BRANCH_NAME
          5. PRタイトルとボディを考えて作成してください:
             - タイトル例: '✨ ${修正カテゴリ}: #${{ github.event.issue.number }} ${問題の核心と対応策を簡潔に説明}'
             - 本文例: '## 🚀 対応内容: ${問題と解決策の概要}
             
             ### 🔍 問題の詳細
             ${問題の詳細説明と影響範囲}
             
             ### 💡 解決方法
             ${解決策の技術的詳細と選択理由}
             
             ### 📝 変更内容
             - ${変更点1 - ファイル名と変更内容}
             - ${変更点2 - ファイル名と変更内容}
             
             ### 🧪 テスト内容
             - ${実施したテスト内容1}
             - ${実施したテスト内容2}
             
             Fixes #${{ github.event.issue.number }}'
          6. issueに進捗報告: gh issue comment ${{ github.event.issue.number }} --body '🎉 PR作成完了しました！
             
             👀 レビューをお願いします
             🔗 PR: [PR URL]
             
             ### 📋 対応概要
             ${修正した問題の概要と、どのように解決したか}
             
             ### 📊 変更影響範囲
             ${この修正によって影響を受ける機能や画面}'"
