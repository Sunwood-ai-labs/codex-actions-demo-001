name: Issue Response Bot (Codex with gh)

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  respond-to-issue:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install OpenAI Codex
        run: npm install -g @openai/codex
        
      - name: GitHub CLIをインストール
        run: |
          type -p curl >/dev/null || apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          
      - name: Post Initial Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 処理開始メッセージと折りたたみセクションでコード表示
          gh issue comment ${{ github.event.issue.number }} --body '🚀 処理を開始します...

          <details>
          <summary>Codexへの指示内容</summary>

          ```
          以下のissueに対する対応計画を立て、ghコマンドでコメントしてください：
          
          Issue番号: #${{ github.event.issue.number }}
          タイトル: ${{ github.event.issue.title }}
          内容: ${{ github.event.issue.body }}
          
          実行してください：
          1. issueを分析して対応方針を決定
          2. ghコマンドで計画をissueにコメント (例: gh issue comment #番号 --body '"'"'内容'"'"')
          3. 必要なコード修正やドキュメント更新を実施
          ```
          </details>'
        
      - name: Analyze and Plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Codexに計画を立てさせ、issueにコメントさせる
          codex --full-auto  --quiet  "以下のissueに対する対応計画を立て、ghコマンドでコメントしてください：
          
          Issue番号: #${{ github.event.issue.number }}
          タイトル: ${{ github.event.issue.title }}
          内容: ${{ github.event.issue.body }}
          
          実行してください：
          1. issueを分析して対応方針を決定
          2. ghコマンドで計画をissueにコメント (例: gh issue comment #番号 --body '内容')
          3. 必要なコード修正やドキュメント更新を実施"
          
      - name: Create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # タイムスタンプを生成 (YYYYMMDDHHmmss形式)
          TIMESTAMP=$(date '+%Y%m%d%H%M%S')
          BRANCH_NAME="fix-issue-${{ github.event.issue.number }}-$TIMESTAMP"
          
          # 現在の状態を確認
          git status
          
          # 新しいブランチを作成
          git checkout -b $BRANCH_NAME
          
          # ブランチ切り替え後の状態を確認
          git status
          
          # Codexが作成したファイル変更を全て追加
          git add .
          
          # ステージング後の状態を確認
          git status
          
          # Codexにプルリクエストを作成させる
          codex --full-auto --quiet $'以下の手順でプルリクエストを作成してください：
      
          # 変更されたファイルをチェック
          git status
      
          # 適切なコミットメッセージで変更をコミット
          # Issue番号とタイトルを参照し、変更の種類に応じて内容を調整してください
          git commit -m "🔧 fix: #${{ github.event.issue.number }} ${{ github.event.issue.title }}" -m "🔍 問題: ${{ github.event.issue.body }}" -m "✅ 対応: 必要なファイルを追加・修正しました" -m "Issue: #${{ github.event.issue.number }}"
          
          # ブランチをリモートにプッシュ
          git push origin HEAD:$BRANCH_NAME
          
          # PRを作成 - 内容はIssueの内容と変更に合わせて適切に記述してください
          gh pr create \
            --title "✨ fix: #${{ github.event.issue.number }} ${{ github.event.issue.title }}" \
            --body $\'## 🚀 対応内容\n${{ github.event.issue.body }}\n\n### 🔍 問題と解決策\nIssueの内容に基づいて適切な対応を実施しました。\n\n### 📝 変更内容\n- 変更したファイルとその内容の説明\n\n### 🧪 テスト内容\n- 動作確認方法と結果\n\nFixes #${{ github.event.issue.number }}\' \
            --base main \
            --head $BRANCH_NAME
          
          # PRのURLを取得
          PR_URL=$(gh pr view --json url -q .url)
          
          # Issueにコメント
          gh issue comment ${{ github.event.issue.number }} --body $\'🎉 PR作成完了しました！\n\n👀 レビューをお願いします\n🔗 PR: \' + PR_URL + $\'\n\n### 📋 対応概要\n${{ github.event.issue.title }}に対応するPRを作成しました。レビューよろしくお願いします！\'
          '
